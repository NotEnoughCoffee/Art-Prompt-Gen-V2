
Changes 4/25/2025:
-Created and updated Selection and Category Records
-Determined formatting for Excel sheet that data will be read from
-Created method to Read Excel file (still needs testing) and create the Categories HashMap

Changes 4/26/2025:
-Add error checking to rarity to ensure it is a # and is between 1-3
-minor edits, cleaned up some existing code
-Setup functions to randomly select a Category from the Map.
-Half setup function to randomly pick a selection from within a Category

Changes 4/27/2025:
-Setup Selection randomizer functionality for using rarity system
-Created FormatText utility class for all text formatting functions.
 -set up error checking and number detection
-updated goals

Todo:
-Rolls class:
  -possibly add external storage for rejected rolls in rarity check so no option is rejected more than 20 times in a row (reset counter upon selection) -> store in a map<selection.name(),count> (string,int) that ?updates an external file? each time a selection is accepted (before rollSelection returns the name? is that a lot of processing? OR maybe less taxing at ?program close?
  -Would autoload as a map as part of Roll constructor
  -potentially make a memory array to also store the previous 'rolls' (only for while program is running, only storing up to 20 or so);
-Add error checking to read function and test with actual Excel file.
 -setup Excel file with categories from V1 project (add a few test cases as well)
 -confirm code works with the Excel file as expected, and test randomizer functionality
-Utilize rolls class functions in a new (Challenge) class that will delegate the rolls being made and combine the results with the FormatText class to return the output message of the results

Long Todo:
-update GUI, Buttons, KeyInput and UIText Classes.
 -add key-press functionality
 -add on-screen buttons (with click detection) for same functions.
 -change application screen size and scaling
 -figure out how to refresh the screen when keys/buttons are pressed to display new rolls or other info

-determine challenge types, if a 'custom' mode is feasible (users would be able to alter number of categories rolled, select/disable categories loaded into the program (Categories need an "enabled" boolean), and potentially change weighted odds. Don't forget a reset button
-- would need to consider a lower limit based on how challenge rolls work, and potentially disable rolls, or detect the number of categories available and re-enable the categories if all options are disabled. (WHILE RETAINING USER SELECTIONS STAY DISABLE)
 - maybe just add a second boolean lol
 - and a external memory storage for disabled category choices! haha

-create program background art, button designs, and any other visuals.
-maybe look into creating visual effects (screen transitions)